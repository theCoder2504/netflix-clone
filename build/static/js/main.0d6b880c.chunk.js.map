{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d6b880c.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/** base url to make requests to the movie database */\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    // snippet of code with runs based on a spesific condition/ variable\n    useEffect(() => {\n        // if [], run once when the row loads and don't run again\n        //useEffect runs every time the second prop changes\n        //if a variable from outside of useEffect is used it needs to be included in the second prop\n\n        //async because the request will take time and than it is asyncron\n        async function fetchData() {\n            //await means that it waits for an answer and after the answer it starts processing\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n        } else {\n            movieTrailer(\n                movie?.name || movie?.title || movie?.original_name || \"\"\n            )\n                .then((url) => {\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    setTrailerUrl(urlParams.get(\"v\"));\n                })\n                .catch((error) => console.log(error));\n        }\n    };\n\n    //   console.log(movies);\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n\n            <div className=\"row_posters\">\n                {/* severall row_posters */}\n\n                {movies.map((movie) => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row_poster ${\n                            isLargeRow && \"row_posterLarge\"\n                        }`}\n                        src={`${baseUrl}${\n                            isLargeRow ? movie.poster_path : movie.backdrop_path\n                        }`}\n                        alt={\n                            movie?.title || movie?.name || movie?.original_name\n                        }\n                    />\n                ))}\n            </div>\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n        </div>\n    );\n}\n\nexport default Row;\n","const API_KEY = \"59dff2b5e757ee3b3307a615b2a9f445\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios.js\";\nimport requests from \"./requests.js\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchTrending);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n        }\n        fetchData();\n    }, []);\n\n    // console.log(movie);\n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n\n    return (\n        <header\n            className=\"banner\"\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition: \"center center\",\n            }}\n        >\n            <div className=\"banner_contents\">\n                {/* title */}\n                <h1 className=\"banner_title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                {/* div -> 2 buttons */}\n                <div className=\"banner_buttons\">\n                    <button className=\"banner_button\">Play</button>\n                    <button className=\"banner_button\">My List</button>\n                </div>\n\n                <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n                {/* description */}\n            </div>\n\n            <div className=\"banner-fadeBottom\"></div>\n        </header>\n    );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n            <img\n                className=\"nav_logo\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" //wikipedia\n                alt=\"Netflix Logo\"\n            />\n\n            <img\n                className=\"nav_avatar\"\n                src=\"https://pbs.twimg.com/media/CW2i0pJW4AEYFI3.png\" //twitter image\n                alt=\"Netflix Avatar\"\n            />\n        </div>\n    );\n}\n\nexport default Nav;\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport Row from \"./Row.js\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner.js\";\nimport Nav from \"./Nav.js\";\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            {/* Nav */}\n            <Nav />\n            <Banner />\n\n            <Row\n                title=\"NETFLIX ORIGINALS\"\n                fetchUrl={requests.fetchNetflixOriginals}\n                isLargeRow\n            />\n            <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n            <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n            <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n            <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n            <Row\n                title=\"Romance Movies\"\n                fetchUrl={requests.fetchRomanceMovies}\n            />\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}